[gd_scene load_steps=82 format=2]

[ext_resource path="res://addons/visual_fsm/fsm/vfsm_state.gd" type="Script" id=1]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm.gd" type="Script" id=2]
[ext_resource path="res://addons/visual_fsm/visual_fsm.gd" type="Script" id=3]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm_trigger_action.gd" type="Script" id=4]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm_trigger_script.gd" type="Script" id=5]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm_trigger_timer.gd" type="Script" id=6]

[sub_resource type="GDScript" id=139]
script/source = "# State: Initialize
extends VFSMStateBase

func enter() -> void:
	Globals.singletons[\"Fader\"].tween(1,1,0);
	yield(Globals, \"allready\")
	Globals.singletons[\"Networking\"].apply_init();
	Globals.singletons[\"Stateful\"].connect(\"new_state\", self, \"update_state\")
	yield(Globals.get_tree(),\"idle_frame\")
	JS.connect(\"set_stake\", self, \"set_stake\");
	Globals.connect(\"configure_bets\", self, \"configure_bets\");
	
	Globals.round_closed = true; #Init should close previous round if open
	var data = Globals.singletons[\"Networking\"].lastround;
	if(\"featureConfigs\" in data):
		for cfg in data.featureConfigs:
			if(\"ScatterMax\" in cfg.data): Globals.fsm_data[\"barMax\"] = int(cfg.data.ScatterMax);
			if(\"ScatterMin\" in cfg.data): Globals.fsm_data[\"barMin\"] = int(cfg.data.ScatterMin);
		
		Globals.singletons[\"Stateful\"].update_states(true);
	else:
		print(\"NO FEATURE CONFIGS!!! STATEFUL MIGHT NOT WORK CORRECTLY\")
		
	Globals.update_win_configs(Globals.singletons[\"Networking\"].lastround.defaultTotal);
	
	Globals.singletons[\"Fader\"].tween(1,0,0.5);
	Globals.fsm_data[\"initialized\"] = true;
	

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass

func update_state(state, init):
	var bar = 0;
	
	if(state.has(\"counter\")):
		bar = state[\"counter\"]-Globals.fsm_data[\"barMin\"];
	else:
		bar = -Globals.fsm_data[\"barMin\"];
	
	if(init):
		if(state.has(\"fstype\") && state[\"fstype\"] != \"\"):
			if(state[\"fstype\"] == \"freespinE1\"): 
				Globals.singletons[\"Game\"].switch_to_tiger_mode();
			elif(state[\"fstype\"] == \"freespinE2\"): 
				Globals.singletons[\"Game\"].switch_to_dragon_mode();
	
	Globals.singletons[\"SegmentBar\"].amount = bar-1;
	#Globals.singletons[\"BarBlue\"].target_amount = bar2;

"

[sub_resource type="Resource" id=140]
script = ExtResource( 1 )
vfsm_id = 0
name = "Initialize"
position = Vector2( 140, 100 )
trigger_ids = [ 0, 8 ]
custom_script = SubResource( 139 )

[sub_resource type="GDScript" id=141]
script/source = "# State: Show Error
extends VFSMStateBase


func enter() -> void:
	pass


func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=142]
script = ExtResource( 1 )
vfsm_id = 1
name = "Init Error"
position = Vector2( 460, 220 )
trigger_ids = [  ]
custom_script = SubResource( 141 )

[sub_resource type="GDScript" id=148]
script/source = "# State: Show Intro
extends VFSMStateBase

func enter() -> void:
	var introcontainer = Globals.singletons[\"Game\"].get_node(\"IntroContainer\");
	var clickwaiter = introcontainer.get_node(\"ClickWaiter\");
	clickwaiter.connect(\"pressed\", self, \"clicked\", [], CONNECT_ONESHOT);
	clickwaiter.enabled = true;	
	
	#Globals.singletons[\"SegmentBar\"].set_amount();
	
#	introcontainer.get_node(\"Centering/LogoMover/Logo\").play_anim_then_loop(\"popup\", \"idle\");
	introcontainer.get_node(\"Centering/LogoMover/AnimationPlayer\").play(\"Idle\")

func clicked():	
	Globals.singletons[\"Fader\"].tween(0.0,1.0,1.0);
	yield(Globals.singletons[\"Fader\"], \"done\")
	
	var lastround = Globals.singletons[\"Networking\"].lastround;
	
	Globals.singletons[\"Game\"].get_node(\"IntroContainer\").queue_free();	
	Globals.singletons[\"Game\"].get_node(\"SlotContainer\").visible = true;
	Globals.singletons[\"Game\"].get_node(\"UIContainer\").visible = true;
		
	Globals.singletons[\"Fader\"].tween(1.0,0.0,0.5);
	yield(Globals.singletons[\"Fader\"], \"done\");
		
	Globals.fsm_data[\"intro_clicked\"] = true;
	JS.output(\"\", \"elysiumgameshowui\");

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass
"

[sub_resource type="Resource" id=149]
script = ExtResource( 1 )
vfsm_id = 2
name = "Show Intro"
position = Vector2( 460, 60 )
trigger_ids = [ 2 ]
custom_script = SubResource( 148 )

[sub_resource type="GDScript" id=150]
script/source = "# State: Ready
extends VFSMStateBase

func enter() -> void:
	print(\"### READY STATE ###\");

	Globals.fsm_data[\"spin_start_command\"] = false;
	Globals.fsm_data[\"wins_shown\"] = false;
	Globals.fsm_data[\"activated_special_tiles\"] = [];
	
	if(JS.enabled):
		JS.connect(\"spinstart\", self, \"start_spin\", [], CONNECT_ONESHOT);
#	else:
	var data = Globals.singletons[\"Networking\"].lastround;
	prints(\"PREVIOUS ROUND:::\", data);

func start_spin(data):
	Globals.fsm_data[\"spin_start_command\"] = true;

func update(_object, _delta: float) -> void:
	if(!JS.enabled):
		if(Input.is_action_pressed(\"spin\")): start_spin({});

func exit() -> void:
	pass
"

[sub_resource type="Resource" id=151]
script = ExtResource( 1 )
vfsm_id = 3
name = "Ready"
position = Vector2( 860, 180 )
trigger_ids = [ 10 ]
custom_script = SubResource( 150 )

[sub_resource type="GDScript" id=152]
script/source = "# State: Spin error
extends VFSMStateBase


func enter() -> void:
	Globals.fsm_data[\"data_received\"] = true;
	Globals.fsm_data[\"round_closed\"] = true;
	Globals.fsm_data[\"reels_stopped\"] = false;
	Globals.singletons[\"Slot\"].stop_spin();
	yield(Globals.singletons[\"Slot\"], \"onstopped\");
	Globals.fsm_data[\"reels_stopped\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=153]
script = ExtResource( 1 )
vfsm_id = 4
name = "Spin error"
position = Vector2( 1360, 460 )
trigger_ids = [ 4 ]
custom_script = SubResource( 152 )

[sub_resource type="GDScript" id=154]
script/source = "# State: Spin Start
extends VFSMStateBase


func enter() -> void:
	Globals.fsm_data[\"data_received\"] = false;
	Globals.fsm_data[\"round_closed\"] = false;
	Globals.fsm_data[\"princess_feature_completed\"] = false;
	Globals.fsm_data[\"dragon_feature_completed\"] = false;
	Globals.fsm_data[\"tiger_feature_completed\"] = false;
	Globals.fsm_data[\"slot_switch_completed\"] = false;
	
	print('### SPIN START STATE ###');
	if(JS.enabled):
		JS.connect(\"spindata\", self, \"spin_data_received\", [], CONNECT_ONESHOT);
		JS.output(\"\", \"elysiumgamespinstart\");
	else:
		Globals.singletons[\"Networking\"].connect(\"spinreceived\", self, \"spin_data_received\", [], CONNECT_ONESHOT);
		Globals.singletons[\"Networking\"].request_spin();
		
	Globals.singletons[\"PopupTiles\"].unpop_all();
	
	if(Globals.singletons[\"WinLines\"].shown):
		Globals.singletons[\"WinLines\"].hide_lines();
		
	Globals.singletons[\"WinBar\"].hide();

	var is_cascading = \\
		Globals.singletons[\"Networking\"].lastround \\
		&& Globals.singletons[\"Networking\"].lastround.nextAction == \"cascade\";
	
	is_cascading = is_cascading || (\"freespin\" in Globals.singletons[\"Networking\"].lastround.nextAction);
	if(!is_cascading):
		Globals.singletons[\"TotalWinBar\"].hide();
		Globals.singletons[\"Slot\"].start_spin();
		
func spin_data_received(data):
	print(\"SPIN DATA WAS RECIEVED\")
	if(\"code\" in data || \"hasError\" in data): return;
	var is_cascading = Globals.singletons[\"Networking\"].lastround && Globals.singletons[\"Networking\"].lastround.nextAction == \"cascade\";
	print(\"IS CASCADNIG \", is_cascading)
	
	if(data.roundMultiplier < Globals.singletons[\"WinMultiplier\"].multiplier):
		Globals.singletons[\"WinMultiplier\"].set_multiplier(data.roundMultiplier);
	
	if(JS.enabled): Globals.singletons[\"Networking\"].lastround = data;
	if(!is_cascading && !Globals.singletons[\"Slot\"].allspinning):
		yield(Globals.singletons[\"Slot\"], \"onstartspin\");
	
	Globals.singletons[\"Networking\"].update_state(data)
	Globals.fsm_data[\"data_received\"] = true;
	
func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=155]
script = ExtResource( 1 )
vfsm_id = 5
name = "Spin Start"
position = Vector2( 1080, 520 )
trigger_ids = [ 1, 5 ]
custom_script = SubResource( 154 )

[sub_resource type="GDScript" id=156]
script/source = "# State: Spin Stop
extends VFSMStateBase

func enter() -> void:
	print(\"### SPIN STOP STATE: ###\");
	Globals.fsm_data[\"reels_stopped\"] = false;
	var data = Globals.singletons[\"Networking\"].lastround;
	
	if (data.action == \"cascade\"):
		yield(Globals.singletons[\"Slot\"].add_data(data), \"completed\");
	else:
		yield(Globals.singletons[\"Slot\"].stop_spin(data), \"completed\");
	
	var tiger_tiles = Globals.singletons[\"Slot\"].get_tiles_with_id(11);
	var dragon_tiles = Globals.singletons[\"Slot\"].get_tiles_with_id(12);
		
	var special_tiles_count = len(tiger_tiles) + len(dragon_tiles);
	if(len(Globals.fsm_data[\"activated_special_tiles\"]) != special_tiles_count):
		var target = Globals.singletons[\"SegmentBar\"].get_current_bar(1);
		for tigertile in tiger_tiles:
			if(Globals.fsm_data[\"activated_special_tiles\"].has(tigertile)): continue;
			var fx = load(\"res://Main/Slot/BonusScene/RedFx.tscn\").instance();
			Globals.singletons[\"Slot\"].add_child(fx);
			fx.global_position = tigertile.global_position;
			fx.set_points(fx.global_position, target.global_position)
			Globals.fsm_data[\"activated_special_tiles\"].append(tigertile);
			tigertile.popup(Tile.AnimationType.SPINE,\"popup\",false);
		
		target = Globals.singletons[\"SegmentBar\"].get_current_bar(-1);
		for dragontile in dragon_tiles:
			if(Globals.fsm_data[\"activated_special_tiles\"].has(dragontile)): continue;
			var fx = load(\"res://Main/Slot/BonusScene/GreenFx.tscn\").instance();
			Globals.singletons[\"Slot\"].add_child(fx);
			fx.global_position = dragontile.global_position;
			fx.set_points(fx.global_position, target.global_position)
			Globals.fsm_data[\"activated_special_tiles\"].append(dragontile);
			dragontile.popup(Tile.AnimationType.SPINE,\"popup\",false);
			
		yield(Globals.get_tree().create_timer(1.0), \"timeout\");
		
	if(Globals.singletons[\"Stateful\"].should_update_state()):
		Globals.singletons[\"Stateful\"].update_states();	
		
	Globals.fsm_data[\"reels_stopped\"] = true;
	
func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=157]
script = ExtResource( 1 )
vfsm_id = 6
name = "Spin Stop"
position = Vector2( 1360, 600 )
trigger_ids = [ 6 ]
custom_script = SubResource( 156 )

[sub_resource type="GDScript" id=166]
script/source = "# State: Close round
extends VFSMStateBase

func enter() -> void:
	print(\"### CLOSE STATE: ###\");
	var data = Globals.singletons[\"Networking\"].lastround;

	if(JS.enabled): 
		print(\"JS is enabled\");
		if (data.nextAction == \"finish\"):
			JS.output(\"\", \"elysiumgameroundend\");
			JS.connect(\"close\", self, \"close_round_received\", [], CONNECT_ONESHOT);
			JS.output(\"\", \"elysiumgameclose\");
		else:
#			yield(slot, \"ontilesremoved\");
			yield(Globals.get_tree(),\"idle_frame\")
			JS.output(\"\", \"elysiumgameroundend\");
			print(\"closing the round\");
			close_round_received();

#		JS.output(\"\", \"elysiumgameroundend\")`;

	else: 
		if (data.nextAction == \"finish\"):
			Globals.singletons[\"Networking\"].connect(\"closereceived\", self, \"close_round_received\", [], CONNECT_ONESHOT);
			Globals.singletons[\"Networking\"].request_close();
		else:
#			yield(slot, \"ontilesremoved\");
			close_round_received();
		
func close_round_received(_data = null):
	Globals.fsm_data[\"round_closed\"] = true;

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass
"

[sub_resource type="Resource" id=167]
script = ExtResource( 1 )
vfsm_id = 7
name = "Close round"
position = Vector2( 2980, 780 )
trigger_ids = [ 7, 8 ]
custom_script = SubResource( 166 )

[sub_resource type="GDScript" id=175]
script/source = "# State: Close Error
extends VFSMStateBase


func enter() -> void:
	Globals.fsm_data[\"data_received\"] = true;
	Globals.fsm_data[\"round_closed\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=176]
script = ExtResource( 1 )
vfsm_id = 8
name = "Close Error"
position = Vector2( 3440, 860 )
trigger_ids = [ 13 ]
custom_script = SubResource( 175 )

[sub_resource type="GDScript" id=183]
script/source = "# State: Wins Check
extends VFSMStateBase


func enter() -> void:
	print(\"### WIN STATE: ###\");
	var data = Globals.singletons[\"Networking\"].lastround;
	var line_wins = calculate_line_wins(data[\"wins\"]);
	data[\"wins_lines_total\"] = line_wins;

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass
	
func calculate_line_wins(wins):
	if(wins == null): return 0.0;
	var n : float = 0.0;

	for win in wins: 
		if(win[\"index\"].findn(\"freespin\")>-1): continue;
		if(!win.has(\"winline\")): n+=float(win[\"win\"]); #winline 0
		elif(int(win[\"winline\"]) > -1): n+=float(win[\"win\"]);

	return n;
"

[sub_resource type="Resource" id=184]
script = ExtResource( 1 )
vfsm_id = 11
name = "Wins Check"
position = Vector2( 2080, 900 )
trigger_ids = [ 14, 15 ]
custom_script = SubResource( 183 )

[sub_resource type="GDScript" id=189]
script/source = "# State: Show Wins
extends VFSMStateBase


func enter() -> void:
	print(\"### SHOW LINE WINS STATE: ###\");

#	if(Globals.singletons[\"PopupTiles\"].remaining_tile_count > 0): 
#		yield(Globals.singletons[\"PopupTiles\"], \"popuptilesend\");
#	Globals.singletons[\"PopupTiles\"].clear_all();
#
	var data = Globals.singletons[\"Networking\"].lastround;
	var slot = Globals.singletons.Slot;
	var win_tiles_positions = calcute_win_tiles_posiitons(data.wins, slot.reels[0].visibleTilesCount);
	
	JS.output(\"linewin\", \"elysiumgamefeature\");
#	Globals.singletons[\"PopupTiles\"].unpop_all();
	Globals.singletons[\"Audio\"].play(\"WinLine\")
	#Globals.singletons[\"WinLines\"].show_lines(data[\"wins\"]);
	#yield(Globals.singletons[\"WinLines\"], \"ShowEnd\")

	#if(data[\"wins_lines_total\"] > Globals.singletons[\"BigWin\"].big_win_limit):
	if(data[\"wins_lines_total\"] > Globals.singletons[\"BigWin\"].big_win_limit):
		JS.output(\"bigwin\", \"elysiumgamefeature\");
		Globals.singletons[\"BigWin\"].show_win(data[\"wins_lines_total\"]);
		yield(Globals.singletons[\"BigWin\"], \"HideEnd\")
		Globals.fsm_data[\"big_win_shown\"] = true;
		if(\"cumulativeWin\" in data):
			Globals.singletons[\"TotalWinBar\"].set_text(data[\"cumulativeWin\"], true);
		elif(\"spinWin\" in data):
			Globals.singletons[\"TotalWinBar\"].set_text(data[\"spinWin\"], true);
	else:
		bangup_wins(data[\"wins_lines_total\"]);

	if (win_tiles_positions.keys().size() != 0):
		yield(slot.popup_tiles(win_tiles_positions), \"completed\");
		slot.remove_tiles(win_tiles_positions);
		yield(slot, \"ontilesremoved\");
		yield(Globals.singletons.Explosions.show_at(win_tiles_positions, slot.reels), \"completed\");
		if(data[\"wins_lines_total\"] > 0.0 ):
			Globals.singletons[\"WinMultiplier\"].set_multiplier(int(data.roundMultiplier)+1);
	
	Globals.fsm_data[\"wins_shown\"] = true;

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass
	
func bangup_wins(n):
	Globals.singletons[\"WinBar\"].show_win(float(n), false);
	yield(Globals.singletons[\"WinBar\"], \"CountEnd\");
	Globals.singletons[\"WinBar\"].hide(true);
	
	var data = Globals.singletons[\"Networking\"].lastround;
	if(\"cumulativeWin\" in data):
		Globals.singletons[\"TotalWinBar\"].set_text(data[\"cumulativeWin\"], true);
	elif(\"spinWin\" in data):
		Globals.singletons[\"TotalWinBar\"].set_text(data[\"spinWin\"], true);

func calcute_win_tiles_posiitons(wins, tiles_count):
	if (wins == null): return {}
	var positions = {};
	
	for win in wins:
		for position in win.symbol_positions:
			var i = int(position / tiles_count);
			var j = fmod(position, tiles_count);

			positions[i] = [] if (not (i in positions)) else positions[i];
			if (not(j in positions[i])):
				positions[i].append(j);
	
	return positions;

func explosion_fx(pos):
	pass
	
"

[sub_resource type="Resource" id=190]
script = ExtResource( 1 )
vfsm_id = 12
name = "Show Line Wins"
position = Vector2( 2320, 780 )
trigger_ids = [ 17 ]
custom_script = SubResource( 189 )

[sub_resource type="GDScript" id=200]
script/source = "# State: Princess Feature
extends VFSMStateBase


func enter() -> void:
	var data = Globals.singletons[\"Networking\"].lastround;
	var featuredata = null;
	
	if(\"features\" in data):
		for feature in data.features: 
			if(feature.type == \"ReplaceTile\" && feature.data.tileid == 9):
				featuredata = feature;
				break;
	
	if(featuredata == null):
		Globals.fsm_data[\"princess_feature_completed\"] = true;
		return;
	print(\"PRINCESS FEATURE\")
	
	#TODO: How to figure out which princessess participate???
	var princesstiles = Globals.singletons[\"Slot\"].get_tiles_with_id(9);
	for tile in princesstiles:
		tile.popup(Tile.AnimationType.SPINE,\"popup\",false);
		
	yield(Globals.get_tree().create_timer(0.5), \"timeout\");

	var wildtiles = [];
	for pos in featuredata.data.positions:
		var y = int(pos)%Globals.visibleTilesCount;
		var x = floor(pos/Globals.visibleTilesCount);		
		var tile = Globals.singletons[\"Slot\"].replace_tile(x, y, featuredata.data.replacewithid);
	
	yield(Globals.get_tree().create_timer(2.0), \"timeout\");
	Globals.fsm_data[\"princess_feature_completed\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=201]
script = ExtResource( 1 )
vfsm_id = 13
name = "Princess Feature"
position = Vector2( 1660, 600 )
trigger_ids = [ 20 ]
custom_script = SubResource( 200 )

[sub_resource type="GDScript" id=204]
script/source = "# State: Dragon Feature
extends VFSMStateBase


func enter() -> void:
	var data = Globals.singletons[\"Networking\"].lastround;
	var featuredata = null;
	#var featuredata = {\"data\":{\"positions\":[0, 5, 8, 13], \"replacewithid\":10, \"tileid\":10}, \"id\":5, \"type\":\"ReplaceTile\"};
	if(\"features\" in data):
		for feature in data.features: 
			if(feature.type == \"ReplaceTile\" && feature.data.tileid == 10):
				featuredata = feature;
				break;
	
	if(featuredata == null):
		Globals.fsm_data[\"dragon_feature_completed\"] = true;
		return;
		
	print(\"DRAGON FEATURE\")
	var slot = Globals.singletons.Slot;
	
	var dragonfx = load(\"res://Main/Slot/BonusScene/Dragon.tscn\").instance();	
	slot.add_child(dragonfx);
	dragonfx.show();
	Globals.singletons[\"SideCharacter\"].play(\"HideDragon\");
	yield(dragonfx, \"popup_end\")
	
	var positions = [];
	var startpos = slot.get_tile_global_position(0,randi()%Globals.visibleTilesCount)-Vector2(200.0, 0.0);
	positions.append(startpos)
	for pos in featuredata.data.positions:
		var y = int(pos)%Globals.visibleTilesCount;
		var x = floor(pos/Globals.visibleTilesCount);
		positions.append(slot.get_tile_global_position(x,y));

	var lastpos = slot.get_tile_global_position(Globals.visibleReelsCount-1,randi()%Globals.visibleTilesCount)+Vector2(200.0, 0.0);
	positions.append(lastpos)
	
	var dragon = load(\"res://Main/Slot/BonusScene/DragonFollower.tscn\").instance();
	slot.add_child(dragon);
	dragon.global_position = positions[0];
	
	dragon.init(positions);
	dragon.play(\"Show\");
	
	for i in len(positions)-1:
		prints(\"Dragon targetpos\", dragon.global_position)
		while(dragon.global_position.distance_to(positions[i]) > 10.0):
			yield(Globals.get_tree(), \"idle_frame\");
		if(i == 0): continue;
		change_tile(featuredata.data.positions[i-1], featuredata.data.replacewithid);
		
	dragon.play(\"Hide\");
	while(dragon.global_position.distance_to(lastpos) > 10.0):
		yield(Globals.get_tree(), \"idle_frame\");
		
	dragon.queue_free();
	Globals.singletons[\"SideCharacter\"].play(\"ShowDragon\");
	Globals.fsm_data[\"dragon_feature_completed\"] = true;


func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass
	
func change_tile(pos, targetid):

	var y = int(pos)%Globals.visibleTilesCount;
	var x = floor(pos/Globals.visibleTilesCount);
	Globals.singletons[\"Slot\"].replace_tile(x, y, targetid);
	var worldpos = Globals.singletons[\"Slot\"].get_tile_global_position(x,y);
	
	var hitfx = load(\"res://Main/Slot/BonusScene/DragonHitFx.tscn\").instance();	
	Globals.singletons.Slot.add_child(hitfx);
	hitfx.global_position = worldpos;
	var animationplayer = hitfx.get_node(\"AnimationPlayer\");
	animationplayer.play(\"Show\");
	yield(animationplayer, \"animation_finished\")
	animationplayer.queue_free();
"

[sub_resource type="Resource" id=205]
script = ExtResource( 1 )
vfsm_id = 14
name = "Dragon Feature"
position = Vector2( 1660, 740 )
trigger_ids = [ 21 ]
custom_script = SubResource( 204 )

[sub_resource type="GDScript" id=206]
script/source = "# State: Tiger Feature
extends VFSMStateBase


func enter() -> void:
	var data = Globals.singletons[\"Networking\"].lastround;
#	var json = '{\"features\":[{\"id\":0,\"type\":\"FatTile\",\"data\":{\"x\":2,\"y\":0,\"w\":4,\"h\":4,\"tileid\":10}},{\"id\":0,\"type\":\"StatefulMap\",\"data\":{\"map\":{\"0.300\":{\"counter\":0}}}}],\"featureview\":[[4,4,5,8],[6,2,1,1],[2,4,3,3],[9,4,2,4],[5,10,10,3],[7,10,10,7]]}'
#	var data = JSON.parse(json).result;
	var featuredata = null;
	if(\"features\" in data):
		for feature in data.features: 
			if(feature.type == \"FatTile\"):
				featuredata = feature;
				break;
#
	if(featuredata == null):
		Globals.fsm_data[\"tiger_feature_completed\"] = true;
		return;
	
	print(\"TIGER FEATURE\");
	var slot = Globals.singletons.Slot;
	var tiger = load(\"res://Main/Slot/BonusScene/Tiger.tscn\").instance();
	var id = 100 + (featuredata.data.w - 2);
	var fatTile = featuredata.data;
	var replace_data = {};
	var pos = slot.get_tile_position(fatTile.x, fatTile.y);
	Globals.singletons[\"SideCharacter\"].play(\"HideTiger\");
	slot.add_child(tiger);
	tiger.show_on(fatTile);
#	yield(tiger.show(), \"completed\");
	yield(Globals.get_tree().create_timer(0.55), \"timeout\");
	
	# 100 is the id for fat tile 2x2, 101 - 3x3 and 102 - 4x4

	for i in range (fatTile.x, fatTile.x + fatTile.w):
		replace_data[i] = data.featureview[i];
#		replace_data[i] = Globals.singletons[\"Networking\"].lastround.featureview[i];
		for j in range (fatTile.y, fatTile.y + fatTile.h):
			replace_data[i][j] = -id if i == fatTile.x && j == fatTile.y else 0;
	
#	slot.replace_tiles(replace_data, \"appear\");
	Globals.get_tree().create_timer(0.1).connect(\"timeout\", slot, \"replace_tiles\", [replace_data, \"appear\"]);

#	yield(tiger.hit(Vector2(pos.x - 612 + 203/2,  pos.y - 333 + 182/2)), \"completed\");
	yield(tiger.hit(Vector2(pos.x - 612,  pos.y - 333), fatTile.w), \"completed\");
	yield(tiger.hide(), \"completed\");
	Globals.singletons[\"SideCharacter\"].play(\"ShowTiger\");
	Globals.fsm_data[\"tiger_feature_completed\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=207]
script = ExtResource( 1 )
vfsm_id = 15
name = "Tiger Feature"
position = Vector2( 1660, 880 )
trigger_ids = [ 22 ]
custom_script = SubResource( 206 )

[sub_resource type="GDScript" id=212]
script/source = "# State: Switch Slot State
extends VFSMStateBase


func enter() -> void:
	var state = Globals.singletons[\"Stateful\"].state;
	if(state == null):
		Globals.fsm_data[\"slot_switch_completed\"] = true;
		return;
	
	if(Globals.singletons[\"Game\"].current_state == \"normal\"):
		if(\"fstype\" in state):
			if(state[\"fstype\"] == \"freespinE1\"):
				Globals.singletons[\"Game\"].switch_to_tiger_mode(true);
				yield(Globals.get_tree().create_timer(1.0), \"timeout\");
			elif(state[\"fstype\"] == \"freespinE2\"): 
				Globals.singletons[\"Game\"].switch_to_dragon_mode(true);
				yield(Globals.get_tree().create_timer(1.0), \"timeout\");
	else:
		Globals.singletons[\"Game\"].switch_to_normal_mode();
		yield(Globals.get_tree().create_timer(1.0), \"timeout\");
		
	Globals.fsm_data[\"slot_switch_completed\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=213]
script = ExtResource( 1 )
vfsm_id = 16
name = "Switch Slot State"
position = Vector2( 2620, 900 )
trigger_ids = [ 23 ]
custom_script = SubResource( 212 )

[sub_resource type="GDScript" id=143]
script/source = "# Trigger: Initialized
extends VFSMTriggerBase

func enter() -> void:
	pass
	
func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"initialized\");

"

[sub_resource type="Resource" id=144]
script = ExtResource( 5 )
vfsm_id = 0
name = "Initialized"
custom_script = SubResource( 143 )

[sub_resource type="GDScript" id=145]
script/source = "# Trigger: Error
extends VFSMTriggerBase

func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"network_error\");
"

[sub_resource type="Resource" id=146]
script = ExtResource( 5 )
vfsm_id = 1
name = "Error"
custom_script = SubResource( 145 )

[sub_resource type="GDScript" id=158]
script/source = "# Trigger: Click
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"intro_clicked\");
"

[sub_resource type="Resource" id=159]
script = ExtResource( 5 )
vfsm_id = 2
name = "Click"
custom_script = SubResource( 158 )

[sub_resource type="GDScript" id=160]
script/source = "# Trigger: Start Spin command
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.fsm_data[\"start_spin_command\"]
"

[sub_resource type="Resource" id=161]
script = ExtResource( 5 )
vfsm_id = 3
name = "Start Spin"
custom_script = SubResource( 160 )

[sub_resource type="GDScript" id=162]
script/source = "# Trigger: Reels stopped
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return false
"

[sub_resource type="Resource" id=163]
script = ExtResource( 5 )
vfsm_id = 4
name = "Reels stopped"
custom_script = SubResource( 162 )

[sub_resource type="GDScript" id=164]
script/source = "# Trigger: Spin started
extends VFSMTriggerBase

func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"data_received\");
"

[sub_resource type="Resource" id=165]
script = ExtResource( 5 )
vfsm_id = 5
name = "Spin started"
custom_script = SubResource( 164 )

[sub_resource type="GDScript" id=168]
script/source = "# Trigger: Spin stopped
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"reels_stopped\");
"

[sub_resource type="Resource" id=169]
script = ExtResource( 5 )
vfsm_id = 6
name = "Spin stopped"
custom_script = SubResource( 168 )

[sub_resource type="GDScript" id=170]
script/source = "# Trigger: Round closed
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"round_closed\");
"

[sub_resource type="Resource" id=171]
script = ExtResource( 5 )
vfsm_id = 7
name = "Round closed"
custom_script = SubResource( 170 )

[sub_resource type="GDScript" id=172]
script/source = "# Trigger: Error
extends VFSMTriggerBase


func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"network_error\");
"

[sub_resource type="Resource" id=173]
script = ExtResource( 5 )
vfsm_id = 8
name = "Error"
custom_script = SubResource( 172 )

[sub_resource type="Resource" id=174]
script = ExtResource( 4 )
vfsm_id = 9
name = ""
action_list = [  ]

[sub_resource type="GDScript" id=177]
script/source = "# Trigger: Spin Start Command
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"spin_start_command\");
"

[sub_resource type="Resource" id=178]
script = ExtResource( 5 )
vfsm_id = 10
name = "Spin Start Command"
custom_script = SubResource( 177 )

[sub_resource type="Resource" id=179]
script = ExtResource( 6 )
vfsm_id = 11
name = ""
duration = 0.0

[sub_resource type="Resource" id=180]
script = ExtResource( 4 )
vfsm_id = 12
name = ""
action_list = [  ]

[sub_resource type="GDScript" id=181]
script/source = "# Trigger: Continue
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return true
"

[sub_resource type="Resource" id=182]
script = ExtResource( 5 )
vfsm_id = 13
name = "Continue"
custom_script = SubResource( 181 )

[sub_resource type="GDScript" id=185]
script/source = "# Trigger: Has Wins
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	var data = Globals.singletons[\"Networking\"].lastround;
	return float(data[\"spinWin\"]) > 0.0;
"

[sub_resource type="Resource" id=186]
script = ExtResource( 5 )
vfsm_id = 14
name = "Has Wins"
custom_script = SubResource( 185 )

[sub_resource type="GDScript" id=187]
script/source = "# Trigger: No wins
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	var data = Globals.singletons[\"Networking\"].lastround;
	return float(data[\"spinWin\"]) == 0.0;
"

[sub_resource type="Resource" id=188]
script = ExtResource( 5 )
vfsm_id = 15
name = "No wins"
custom_script = SubResource( 187 )

[sub_resource type="Resource" id=191]
script = ExtResource( 4 )
vfsm_id = 16
name = ""
action_list = [  ]

[sub_resource type="GDScript" id=194]
script/source = "# Trigger: Big win shown
extends VFSMTriggerBase

func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"wins_shown\");
"

[sub_resource type="Resource" id=195]
script = ExtResource( 5 )
vfsm_id = 17
name = "Has Big Win"
custom_script = SubResource( 194 )

[sub_resource type="GDScript" id=196]
script/source = "# Trigger: No Big Win
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	var data = Globals.singletons[\"Networking\"].lastround;
	return Globals.get_fsm_data(\"wins_shown\") && \\
		data[\"wins_lines_total\"] <= Globals.singletons[\"BigWin\"].big_win_limit;
"

[sub_resource type="Resource" id=197]
script = ExtResource( 5 )
vfsm_id = 18
name = "No Big Win"
custom_script = SubResource( 196 )

[sub_resource type="GDScript" id=198]
script/source = "# Trigger: Big Win End
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"big_win_shown\")
"

[sub_resource type="Resource" id=199]
script = ExtResource( 5 )
vfsm_id = 19
name = "Big Win End"
custom_script = SubResource( 198 )

[sub_resource type="GDScript" id=202]
script/source = "# Trigger: Princess Feature Done
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.fsm_data[\"princess_feature_completed\"];
"

[sub_resource type="Resource" id=203]
script = ExtResource( 5 )
vfsm_id = 20
name = "Princess Feature Done"
custom_script = SubResource( 202 )

[sub_resource type="GDScript" id=208]
script/source = "# Trigger: Dragon Feature Done
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.fsm_data[\"dragon_feature_completed\"]
"

[sub_resource type="Resource" id=209]
script = ExtResource( 5 )
vfsm_id = 21
name = "Dragon Feature Done"
custom_script = SubResource( 208 )

[sub_resource type="GDScript" id=210]
script/source = "# Trigger: Tiger Feature Done
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.fsm_data[\"tiger_feature_completed\"]
"

[sub_resource type="Resource" id=211]
script = ExtResource( 5 )
vfsm_id = 22
name = "Tiger Feature Done"
custom_script = SubResource( 210 )

[sub_resource type="GDScript" id=214]
script/source = "# Trigger: Switch slot completed
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.fsm_data[\"slot_switch_completed\"];
"

[sub_resource type="Resource" id=215]
script = ExtResource( 5 )
vfsm_id = 23
name = "Switch slot completed"
custom_script = SubResource( 214 )

[sub_resource type="Resource" id=147]
script = ExtResource( 2 )
start_state_vfsm_id = 0
start_position = Vector2( -40, 120 )
states = [ SubResource( 140 ), SubResource( 142 ), SubResource( 149 ), SubResource( 151 ), SubResource( 153 ), SubResource( 155 ), SubResource( 157 ), SubResource( 167 ), SubResource( 176 ), SubResource( 184 ), SubResource( 190 ), SubResource( 201 ), SubResource( 205 ), SubResource( 207 ), SubResource( 213 ) ]
triggers = [ SubResource( 144 ), SubResource( 146 ), SubResource( 159 ), SubResource( 161 ), SubResource( 163 ), SubResource( 165 ), SubResource( 169 ), SubResource( 171 ), SubResource( 173 ), SubResource( 174 ), SubResource( 178 ), SubResource( 179 ), SubResource( 180 ), SubResource( 182 ), SubResource( 186 ), SubResource( 188 ), SubResource( 191 ), SubResource( 195 ), SubResource( 197 ), SubResource( 199 ), SubResource( 203 ), SubResource( 209 ), SubResource( 211 ), SubResource( 215 ) ]
transitions = [ 0, 8, 1, 0, 0, 2, 2, 2, 3, 3, 10, 5, 4, 4, 3, 5, 5, 6, 5, 1, 4, 6, 6, 13, 7, 7, 3, 7, 8, 8, 8, 13, 3, 11, 14, 12, 11, 15, 16, 12, 17, 16, 13, 20, 14, 14, 21, 15, 15, 22, 11, 16, 23, 7 ]

[node name="Scenario" type="Node"]
script = ExtResource( 3 )
finite_state_machine = SubResource( 147 )
