[gd_scene load_steps=70 format=2]

[ext_resource path="res://addons/visual_fsm/fsm/vfsm_state.gd" type="Script" id=1]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm.gd" type="Script" id=2]
[ext_resource path="res://addons/visual_fsm/visual_fsm.gd" type="Script" id=3]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm_trigger_action.gd" type="Script" id=4]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm_trigger_script.gd" type="Script" id=5]
[ext_resource path="res://addons/visual_fsm/fsm/vfsm_trigger_timer.gd" type="Script" id=6]

[sub_resource type="GDScript" id=139]
script/source = "# State: Initialize
extends VFSMStateBase

func enter() -> void:
	Globals.singletons[\"Fader\"].tween(1,1,0);
	yield(Globals, \"allready\")
	Globals.singletons[\"Stateful\"].connect(\"new_state\", self, \"update_state\")
	yield(Globals.get_tree(),\"idle_frame\")
	JS.connect(\"init\", Globals.singletons[\"Networking\"], \"init_received\", [], CONNECT_ONESHOT);
	Globals.singletons[\"Networking\"].connect(\"initcomplete\", self, \"init_data_received\", [], CONNECT_ONESHOT);
	Globals.singletons[\"Networking\"].connect(\"fail\", self, \"error_received\");
	JS.connect(\"set_stake\", self, \"set_stake\");
	Globals.connect(\"configure_bets\", self, \"configure_bets\");
	
	if(JS.enabled): 
		JS.output(\"\", \"elysiumgamerequestinit\");
	else: 
		Globals.singletons[\"Networking\"].request_init();
	
func init_data_received():
	Globals.round_closed = true; #Init should close previous round if open
	
	if(\"featureConfigs\" in Globals.singletons[\"Networking\"].lastround):
		for cfg in Globals.singletons[\"Networking\"].lastround.featureConfigs:
			if(\"ScatterMax\" in cfg.data): Globals.fsm_data[\"barMax\"] = int(cfg.data.ScatterMax);
			if(\"ScatterMin\" in cfg.data): Globals.fsm_data[\"barMin\"] = int(cfg.data.ScatterMin);
			
		Globals.singletons[\"Stateful\"].update_states(true);
	else:
		print(\"NO FEATURE CONFIGS!!! STATEFUL MIGHT NOT WORK CORRECTLY\")
	Globals.update_win_configs(Globals.singletons[\"Networking\"].lastround.defaultTotal);
	
	
	Globals.singletons[\"Fader\"].tween(1,0,0.5);
	Globals.fsm_data[\"initialized\"] = true;
	
func error_received(error_id=-1):
	Globals.fsm_data[\"network_error\"] = true;

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass

func update_state(state, init):
	var bar = 0;
	
	if(state.has(\"counter\")):
		bar = state[\"counter\"]-Globals.fsm_data[\"barMin\"];
		
	if(init):
		bar = clamp(bar, Globals.fsm_data[\"barMin\"], Globals.fsm_data[\"barMax\"]);
		
	Globals.singletons[\"SegmentBar\"].amount = bar-1;
	#Globals.singletons[\"BarBlue\"].target_amount = bar2;

"

[sub_resource type="Resource" id=140]
script = ExtResource( 1 )
vfsm_id = 0
name = "Initialize"
position = Vector2( 120, 140 )
trigger_ids = [ 0, 8 ]
custom_script = SubResource( 139 )

[sub_resource type="GDScript" id=141]
script/source = "# State: Show Error
extends VFSMStateBase


func enter() -> void:
	pass


func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=142]
script = ExtResource( 1 )
vfsm_id = 1
name = "Init Error"
position = Vector2( 440, 480 )
trigger_ids = [  ]
custom_script = SubResource( 141 )

[sub_resource type="GDScript" id=148]
script/source = "# State: Show Intro
extends VFSMStateBase

func enter() -> void:
	var introcontainer = Globals.singletons[\"Game\"].get_node(\"IntroContainer\");
	var clickwaiter = introcontainer.get_node(\"ClickWaiter\");
	clickwaiter.connect(\"pressed\", self, \"clicked\", [], CONNECT_ONESHOT);
	clickwaiter.enabled = true;	
	
	#Globals.singletons[\"SegmentBar\"].set_amount();
	
	introcontainer.get_node(\"Centering/LogoMover/Logo\").play_anim_then_loop(\"popup\", \"idle\");

func clicked():	
	Globals.singletons[\"Fader\"].tween(0.0,1.0,1.0);
	yield(Globals.singletons[\"Fader\"], \"done\")
	
	var lastround = Globals.singletons[\"Networking\"].lastround;
	
	Globals.singletons[\"Game\"].get_node(\"IntroContainer\").queue_free();	
	Globals.singletons[\"Game\"].get_node(\"SlotContainer\").visible = true;
	Globals.singletons[\"Game\"].get_node(\"UIContainer\").visible = true;
		
	Globals.singletons[\"Fader\"].tween(1.0,0.0,0.5);
	yield(Globals.singletons[\"Fader\"], \"done\");
		
	Globals.fsm_data[\"intro_clicked\"] = true;
	JS.output(\"\", \"elysiumgameshowui\");

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass
"

[sub_resource type="Resource" id=149]
script = ExtResource( 1 )
vfsm_id = 2
name = "Show Intro"
position = Vector2( 480, 280 )
trigger_ids = [ 2 ]
custom_script = SubResource( 148 )

[sub_resource type="GDScript" id=150]
script/source = "# State: Ready
extends VFSMStateBase

func enter() -> void:
	print(\"### READY STATE ###\");

	Globals.fsm_data[\"spin_start_command\"] = false;
	Globals.fsm_data[\"wins_shown\"] = false;
	Globals.fsm_data[\"activated_special_tiles\"] = [];
	
	if(JS.enabled):
		JS.connect(\"spinstart\", self, \"start_spin\", [], CONNECT_ONESHOT);
#	else:
	var data = Globals.singletons[\"Networking\"].lastround;
	prints(\"PREVIOUS ROUND:::\", data);

func start_spin(data):
	Globals.fsm_data[\"spin_start_command\"] = true;

func update(_object, _delta: float) -> void:
	if(!JS.enabled):
		if(Input.is_action_pressed(\"spin\")): start_spin({});

func exit() -> void:
	pass
"

[sub_resource type="Resource" id=151]
script = ExtResource( 1 )
vfsm_id = 3
name = "Ready"
position = Vector2( 860, -100 )
trigger_ids = [ 10 ]
custom_script = SubResource( 150 )

[sub_resource type="GDScript" id=152]
script/source = "# State: Spin error
extends VFSMStateBase


func enter() -> void:
	Globals.fsm_data[\"data_received\"] = true;
	Globals.fsm_data[\"round_closed\"] = true;
	Globals.fsm_data[\"reels_stopped\"] = false;
	Globals.singletons[\"Slot\"].stop_spin();
	yield(Globals.singletons[\"Slot\"], \"onstopped\");
	Globals.fsm_data[\"reels_stopped\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=153]
script = ExtResource( 1 )
vfsm_id = 4
name = "Spin error"
position = Vector2( 700, 1020 )
trigger_ids = [ 4 ]
custom_script = SubResource( 152 )

[sub_resource type="GDScript" id=154]
script/source = "# State: Spin Start
extends VFSMStateBase


func enter() -> void:
	Globals.fsm_data[\"data_received\"] = false;
	Globals.fsm_data[\"round_closed\"] = false;
	Globals.fsm_data[\"princess_feature_completed\"] = false;
	Globals.fsm_data[\"dragon_feature_completed\"] = false;
	Globals.fsm_data[\"tiger_feature_completed\"] = false;
	
	print('### SPIN START STATE ###');
	if(JS.enabled):
		JS.connect(\"spindata\", self, \"spin_data_received\", [], CONNECT_ONESHOT);
		JS.output(\"\", \"elysiumgamespinstart\");
	else:
		Globals.singletons[\"Networking\"].connect(\"spinreceived\", self, \"spin_data_received\", [], CONNECT_ONESHOT);
		Globals.singletons[\"Networking\"].request_spin();
		
	Globals.singletons[\"PopupTiles\"].unpop_all();
	
	if(Globals.singletons[\"WinLines\"].shown):
		Globals.singletons[\"WinLines\"].hide_lines();
		
	if(Globals.singletons[\"WinBar\"].shown):
		Globals.singletons[\"WinBar\"].hide();

	var is_cascading = \\
		Globals.singletons[\"Networking\"].lastround \\
		&& Globals.singletons[\"Networking\"].lastround.nextAction == \"cascade\";
	
	if(!is_cascading):
		Globals.singletons[\"Slot\"].start_spin();
		
func spin_data_received(data):
	print(\"SPIN DATA WAS RECIEVED\", data)
	if(\"code\" in data || \"hasError\" in data): return;
	var is_cascading = Globals.singletons[\"Networking\"].lastround && Globals.singletons[\"Networking\"].lastround.nextAction == \"cascade\";
	print(\"IS CASCADNIG \", is_cascading)
	if(JS.enabled): Globals.singletons[\"Networking\"].lastround = data;
	if(!is_cascading && !Globals.singletons[\"Slot\"].allspinning):
		yield(Globals.singletons[\"Slot\"], \"onstartspin\");
				
	Globals.singletons[\"Networking\"].update_state(data)
	Globals.fsm_data[\"data_received\"] = true;
	
func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=155]
script = ExtResource( 1 )
vfsm_id = 5
name = "Spin Start"
position = Vector2( 1220, 220 )
trigger_ids = [ 1, 5 ]
custom_script = SubResource( 154 )

[sub_resource type="GDScript" id=156]
script/source = "# State: Spin Stop
extends VFSMStateBase

func enter() -> void:
	print(\"### SPIN STOP STATE: ###\");
	Globals.fsm_data[\"reels_stopped\"] = false;
	var data = Globals.singletons[\"Networking\"].lastround;
	
	if (data.action == \"cascade\"):
		yield(Globals.singletons[\"Slot\"].add_data(data), \"completed\");
	else:
		yield(Globals.singletons[\"Slot\"].stop_spin(data), \"completed\");
	
	var tiger_tiles = Globals.singletons[\"Slot\"].get_tiles_with_id(11);
	var dragon_tiles = Globals.singletons[\"Slot\"].get_tiles_with_id(12);
		
	var special_tiles_count = len(tiger_tiles) + len(dragon_tiles);
	if(len(Globals.fsm_data[\"activated_special_tiles\"]) != special_tiles_count):
		var target = Globals.singletons[\"SegmentBar\"].get_current_bar();
		for tigertile in tiger_tiles:
			if(Globals.fsm_data[\"activated_special_tiles\"].has(tigertile)): continue;
			var fx = load(\"res://Main/Slot/BonusScene/RedFx.tscn\").instance();
			fx.target = target;
			Globals.singletons[\"Slot\"].add_child(fx);
			fx.global_position = tigertile.global_position;
			fx.set_points(fx.global_position, target.global_position)
			Globals.fsm_data[\"activated_special_tiles\"].append(tigertile);
			tigertile.popup(Tile.AnimationType.SPINE,\"popup\",false);
			
		for dragontile in dragon_tiles:
			if(Globals.fsm_data[\"activated_special_tiles\"].has(dragontile)): continue;
			var fx = load(\"res://Main/Slot/BonusScene/GreenFx.tscn\").instance();
			fx.target = target;
			Globals.singletons[\"Slot\"].add_child(fx);
			fx.global_position = dragontile.global_position;
			fx.set_points(fx.global_position, target.global_position)
			Globals.fsm_data[\"activated_special_tiles\"].append(dragontile);
			dragontile.popup(Tile.AnimationType.SPINE,\"popup\",false);
			
		yield(Globals.get_tree().create_timer(1.0), \"timeout\");
		
	if(Globals.singletons[\"Stateful\"].should_update_state()):
		Globals.singletons[\"Stateful\"].update_states();	
		
	Globals.fsm_data[\"reels_stopped\"] = true;
	
func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=157]
script = ExtResource( 1 )
vfsm_id = 6
name = "Spin Stop"
position = Vector2( 1340, 580 )
trigger_ids = [ 6 ]
custom_script = SubResource( 156 )

[sub_resource type="GDScript" id=166]
script/source = "# State: Close round
extends VFSMStateBase

func enter() -> void:
	print(\"### CLOSE STATE: ###\");
	var data = Globals.singletons[\"Networking\"].lastround;
	var slot = Globals.singletons.Slot;
	var wins = data.wins if data.wins != null else [];
	var tiles_count = slot.reels[0].visibleTilesCount;
	var win_tiles_positions = {};
	
	for win in wins:
		for position in win.symbol_positions:
			var i = int(position / tiles_count);
			var j = fmod(position, tiles_count);

			win_tiles_positions[i] = [] if (not (i in win_tiles_positions)) else win_tiles_positions[i];
			if (not(j in win_tiles_positions[i])):
				win_tiles_positions[i].append(j);

	if (win_tiles_positions.keys().size() != 0):
		yield(slot.popup_tiles(win_tiles_positions), \"completed\");
		slot.remove_tiles(win_tiles_positions);
		yield(Globals.singletons.Explosions.show_at(win_tiles_positions, slot.reels), \"completed\");
	
	if(JS.enabled): 
		print(\"JS is enabled\");
		if (data.nextAction == \"finish\"):
			JS.output(\"\", \"elysiumgameroundend\");
			JS.connect(\"close\", self, \"close_round_received\", [], CONNECT_ONESHOT);
			JS.output(\"\", \"elysiumgameclose\");
		else:
#			yield(slot, \"ontilesremoved\");
			yield(Globals.get_tree(),\"idle_frame\")
			JS.output(\"\", \"elysiumgameroundend\");
			print(\"closing the round\");
			close_round_received();

#		JS.output(\"\", \"elysiumgameroundend\")`;

	else: 
		if (data.nextAction == \"finish\"):
			Globals.singletons[\"Networking\"].connect(\"closereceived\", self, \"close_round_received\", [], CONNECT_ONESHOT);
			Globals.singletons[\"Networking\"].request_close();
		else:
#			yield(slot, \"ontilesremoved\");
			close_round_received();

func close_round_received(_data = null):
	Globals.fsm_data[\"round_closed\"] = true;

func update(_object, _delta: float) -> void:
	pass

func exit() -> void:
	pass
"

[sub_resource type="Resource" id=167]
script = ExtResource( 1 )
vfsm_id = 7
name = "Close round"
position = Vector2( 2540, 660 )
trigger_ids = [ 7, 8 ]
custom_script = SubResource( 166 )

[sub_resource type="GDScript" id=175]
script/source = "# State: Close Error
extends VFSMStateBase


func enter() -> void:
	Globals.fsm_data[\"data_received\"] = true;
	Globals.fsm_data[\"round_closed\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=176]
script = ExtResource( 1 )
vfsm_id = 8
name = "Close Error"
position = Vector2( 1240, 1200 )
trigger_ids = [ 13 ]
custom_script = SubResource( 175 )

[sub_resource type="GDScript" id=183]
script/source = "# State: Wins Check
extends VFSMStateBase


func enter() -> void:
	print(\"### WIN STATE: ###\");
	pass


func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=184]
script = ExtResource( 1 )
vfsm_id = 11
name = "Wins Check"
position = Vector2( 2060, 640 )
trigger_ids = [ 14, 15 ]
custom_script = SubResource( 183 )

[sub_resource type="GDScript" id=189]
script/source = "# State: Show Wins
extends VFSMStateBase


func enter() -> void:
	print(\"### SHOW LINE WINS STATE: ###\");
#	if(Globals.singletons[\"PopupTiles\"].remaining_tile_count > 0): 
#		yield(Globals.singletons[\"PopupTiles\"], \"popuptilesend\");
#	Globals.singletons[\"PopupTiles\"].clear_all();
#
#	var data = Globals.singletons[\"Networking\"].lastround;
#	var line_wins = calculate_line_wins(data[\"wins\"]);
#	data[\"wins_lines_total\"] = line_wins;
#
#	JS.output(\"linewin\", \"elysiumgamefeature\");
#	Globals.singletons[\"PopupTiles\"].unpop_all();
#	Globals.singletons[\"Audio\"].play(\"WinLine\")
#	Globals.singletons[\"WinLines\"].show_lines(data[\"wins\"]);
#
#	yield(Globals.singletons[\"WinLines\"], \"ShowEnd\")
#
#	if(line_wins > Globals.singletons[\"BigWin\"].big_win_limit):
#		JS.output(\"bigwin\", \"elysiumgamefeature\");
#		Globals.singletons[\"BigWin\"].show_win(line_wins);
#		yield(Globals.singletons[\"BigWin\"], \"HideEnd\")
#		Globals.singletons[\"WinBar\"].set_text(line_wins, false);
#		Globals.fsm_data[\"big_win_shown\"] = true;
#	else:
#		Globals.singletons[\"WinBar\"].set_text(float(line_wins), false);
	
	Globals.fsm_data[\"wins_shown\"] = true;
	
func calculate_line_wins(wins):
	if(wins == null): return 0.0;
	var n : float = 0.0;

	for win in wins: 
		if(win[\"index\"].findn(\"freespin\")>-1): continue;
		if(!win.has(\"winline\")): n+=float(win[\"win\"]); #winline 0
		elif(int(win[\"winline\"]) > -1): n+=float(win[\"win\"]);

	return n;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=190]
script = ExtResource( 1 )
vfsm_id = 12
name = "Show Line Wins"
position = Vector2( 2340, 580 )
trigger_ids = [ 17 ]
custom_script = SubResource( 189 )

[sub_resource type="GDScript" id=200]
script/source = "# State: Princess Feature
extends VFSMStateBase


func enter() -> void:
	var data = Globals.singletons[\"Networking\"].lastround;
	var featuredata = null;
	for feature in data.features: 
		if(feature.type == \"ReplaceTile\" && feature.data.tileid == 9):
			featuredata = feature;
			break;
	
	if(featuredata == null):
		Globals.fsm_data[\"princess_feature_completed\"] = true;
		return;
		
	var princesstiles = Globals.singletons[\"Slot\"].get_tiles_with_id(9);
	for tile in princesstiles:
		tile.popup(Tile.AnimationType.SPINE,\"popup\",false);
		
	yield(Globals.get_tree().create_timer(0.5), \"timeout\");

	var wildtiles = [];
	for pos in featuredata.data.positions:
		var y = int(pos)%Globals.visibleTilesCount;
		var x = floor(pos/Globals.visibleTilesCount);		
		var tile = Globals.singletons[\"Slot\"].replace_tile(x, y, featuredata.data.replacewithid);
	
	yield(Globals.get_tree().create_timer(2.0), \"timeout\");
	Globals.fsm_data[\"princess_feature_completed\"] = true;

func update(_object, _delta: float) -> void:
	pass


func exit() -> void:
	pass
"

[sub_resource type="Resource" id=201]
script = ExtResource( 1 )
vfsm_id = 13
name = "Princess Feature"
position = Vector2( 1620, 600 )
trigger_ids = [ 20 ]
custom_script = SubResource( 200 )

[sub_resource type="GDScript" id=143]
script/source = "# Trigger: Initialized
extends VFSMTriggerBase

func enter() -> void:
	pass
	
func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"initialized\");

"

[sub_resource type="Resource" id=144]
script = ExtResource( 5 )
vfsm_id = 0
name = "Initialized"
custom_script = SubResource( 143 )

[sub_resource type="GDScript" id=145]
script/source = "# Trigger: Error
extends VFSMTriggerBase

func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"network_error\");
"

[sub_resource type="Resource" id=146]
script = ExtResource( 5 )
vfsm_id = 1
name = "Error"
custom_script = SubResource( 145 )

[sub_resource type="GDScript" id=158]
script/source = "# Trigger: Click
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"intro_clicked\");
"

[sub_resource type="Resource" id=159]
script = ExtResource( 5 )
vfsm_id = 2
name = "Click"
custom_script = SubResource( 158 )

[sub_resource type="GDScript" id=160]
script/source = "# Trigger: Start Spin command
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.fsm_data[\"start_spin_command\"]
"

[sub_resource type="Resource" id=161]
script = ExtResource( 5 )
vfsm_id = 3
name = "Start Spin"
custom_script = SubResource( 160 )

[sub_resource type="GDScript" id=162]
script/source = "# Trigger: Reels stopped
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return false
"

[sub_resource type="Resource" id=163]
script = ExtResource( 5 )
vfsm_id = 4
name = "Reels stopped"
custom_script = SubResource( 162 )

[sub_resource type="GDScript" id=164]
script/source = "# Trigger: Spin started
extends VFSMTriggerBase

func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"data_received\");
"

[sub_resource type="Resource" id=165]
script = ExtResource( 5 )
vfsm_id = 5
name = "Spin started"
custom_script = SubResource( 164 )

[sub_resource type="GDScript" id=168]
script/source = "# Trigger: Spin stopped
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"reels_stopped\");
"

[sub_resource type="Resource" id=169]
script = ExtResource( 5 )
vfsm_id = 6
name = "Spin stopped"
custom_script = SubResource( 168 )

[sub_resource type="GDScript" id=170]
script/source = "# Trigger: Round closed
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"round_closed\");
"

[sub_resource type="Resource" id=171]
script = ExtResource( 5 )
vfsm_id = 7
name = "Round closed"
custom_script = SubResource( 170 )

[sub_resource type="GDScript" id=172]
script/source = "# Trigger: Error
extends VFSMTriggerBase


func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"network_error\");
"

[sub_resource type="Resource" id=173]
script = ExtResource( 5 )
vfsm_id = 8
name = "Error"
custom_script = SubResource( 172 )

[sub_resource type="Resource" id=174]
script = ExtResource( 4 )
vfsm_id = 9
name = ""
action_list = [  ]

[sub_resource type="GDScript" id=177]
script/source = "# Trigger: Spin Start Command
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"spin_start_command\");
"

[sub_resource type="Resource" id=178]
script = ExtResource( 5 )
vfsm_id = 10
name = "Spin Start Command"
custom_script = SubResource( 177 )

[sub_resource type="Resource" id=179]
script = ExtResource( 6 )
vfsm_id = 11
name = ""
duration = 0.0

[sub_resource type="Resource" id=180]
script = ExtResource( 4 )
vfsm_id = 12
name = ""
action_list = [  ]

[sub_resource type="GDScript" id=181]
script/source = "# Trigger: Continue
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return true
"

[sub_resource type="Resource" id=182]
script = ExtResource( 5 )
vfsm_id = 13
name = "Continue"
custom_script = SubResource( 181 )

[sub_resource type="GDScript" id=185]
script/source = "# Trigger: Has Wins
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	var data = Globals.singletons[\"Networking\"].lastround;
	return float(data[\"spinWin\"]) > 0.0;
"

[sub_resource type="Resource" id=186]
script = ExtResource( 5 )
vfsm_id = 14
name = "Has Wins"
custom_script = SubResource( 185 )

[sub_resource type="GDScript" id=187]
script/source = "# Trigger: No wins
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	var data = Globals.singletons[\"Networking\"].lastround;
	return float(data[\"spinWin\"]) == 0.0;
"

[sub_resource type="Resource" id=188]
script = ExtResource( 5 )
vfsm_id = 15
name = "No wins"
custom_script = SubResource( 187 )

[sub_resource type="Resource" id=191]
script = ExtResource( 4 )
vfsm_id = 16
name = ""
action_list = [  ]

[sub_resource type="GDScript" id=194]
script/source = "# Trigger: Big win shown
extends VFSMTriggerBase

func enter() -> void:
	pass

func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"wins_shown\");
"

[sub_resource type="Resource" id=195]
script = ExtResource( 5 )
vfsm_id = 17
name = "Has Big Win"
custom_script = SubResource( 194 )

[sub_resource type="GDScript" id=196]
script/source = "# Trigger: No Big Win
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	var data = Globals.singletons[\"Networking\"].lastround;
	return Globals.get_fsm_data(\"wins_shown\") && \\
		data[\"wins_lines_total\"] <= Globals.singletons[\"BigWin\"].big_win_limit;
"

[sub_resource type="Resource" id=197]
script = ExtResource( 5 )
vfsm_id = 18
name = "No Big Win"
custom_script = SubResource( 196 )

[sub_resource type="GDScript" id=198]
script/source = "# Trigger: Big Win End
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.get_fsm_data(\"big_win_shown\")
"

[sub_resource type="Resource" id=199]
script = ExtResource( 5 )
vfsm_id = 19
name = "Big Win End"
custom_script = SubResource( 198 )

[sub_resource type="GDScript" id=202]
script/source = "# Trigger: Princess Feature Done
extends VFSMTriggerBase


func enter() -> void:
	pass


func is_triggered(_object, _delta: float) -> bool:
	return Globals.fsm_data[\"princess_feature_completed\"];
"

[sub_resource type="Resource" id=203]
script = ExtResource( 5 )
vfsm_id = 20
name = "Princess Feature Done"
custom_script = SubResource( 202 )

[sub_resource type="Resource" id=147]
script = ExtResource( 2 )
start_state_vfsm_id = 0
start_position = Vector2( -200, 160 )
states = [ SubResource( 140 ), SubResource( 142 ), SubResource( 149 ), SubResource( 151 ), SubResource( 153 ), SubResource( 155 ), SubResource( 157 ), SubResource( 167 ), SubResource( 176 ), SubResource( 184 ), SubResource( 190 ), SubResource( 201 ) ]
triggers = [ SubResource( 144 ), SubResource( 146 ), SubResource( 159 ), SubResource( 161 ), SubResource( 163 ), SubResource( 165 ), SubResource( 169 ), SubResource( 171 ), SubResource( 173 ), SubResource( 174 ), SubResource( 178 ), SubResource( 179 ), SubResource( 180 ), SubResource( 182 ), SubResource( 186 ), SubResource( 188 ), SubResource( 191 ), SubResource( 195 ), SubResource( 197 ), SubResource( 199 ), SubResource( 203 ) ]
transitions = [ 0, 8, 1, 0, 0, 2, 2, 2, 3, 3, 10, 5, 4, 4, 3, 5, 5, 6, 5, 1, 4, 6, 6, 13, 7, 7, 3, 7, 8, 8, 8, 13, 3, 11, 15, 7, 11, 14, 12, 12, 17, 7, 13, 20, 11 ]

[node name="Scenario" type="Node"]
script = ExtResource( 3 )
finite_state_machine = SubResource( 147 )
